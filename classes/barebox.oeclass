## Class for building barebox.
##
## The barebox class is used for integration of the Barebox bootloader in OE-lite
## BSP projects.
## 
## The USE flags are typically set in the machine configuration file, fx.
## conf/machine/myboard.conf
## 
## ----
## MACHINE_USE_barebox_defconfig = "file"
## MACHINE_USE_barebox_maxsize = "261124"
## ----
## 
## There are 3 different ways to configure a barebox recipe in OE-lite.
## 
## Use defconfig file from DEPENDS (barebox-defconfig)::
##    If the USE_barebox_defconfig flag is not set (the default), the barebox
##    recipe will depend on a barebox-defconfig package.  This can fx. be used to
##    use a standard/upstream barebox recipe but with a board specific custom
##    configuration maintained in a project specific recipe.
## 
## Use defconfig from barebox source::
##    If the USE_barebox_defconfig flag is set to "file", the barebox recipe
##    should include a defconfig file itself.  This can be used in custom barebox
##    recipes, where the configuration is hosted in OE-lite instead of in the
##    barebox source.
##
## Use defconfig file from SRC_URI::
##    Any other value of USE_barebox_defconfig will be assume to be a valid
##    xxxxx_defconfig value to give to make to configure using the barebox
##    source.
## 
## The USE_barebox_maxsize flag can be used to specify a maximum allowed size of
## the barebox image file (in bytes).
## 
## Integration of Barebox development in a project specific barebox.git
## repository is done by adding a new barebox recipe in the project specific
## OE-lite recipes directory, fx. project-barebox.oe:
## 
## ----
## DESCRIPTION = "Project specific Barebox bootloader"
## inherit barebox
## SRC_URI = "git://...../barebox.git"
## ----
##
## So to integrate a barebox bootloader in OE-lite, create a new recipe,
## inherit this class and set the SRC_URI, and ensure that the correct
## defconfig is used, using the barebox_defconfig USE flag.
##

DESCRIPTION ?= "Barebox - a bootloader that inherits the best of U-Boot and the Linux kernel"
HOMEPAGE ?= "http://www.barebox.org/"
LICENSE ?= "GPL"

RECIPE_TYPES = "machine"

require conf/barebox.conf

inherit c make kernel-arch

EXTRA_OEMAKE = "ARCH=${KERNEL_ARCH} CROSS_COMPILE=${TARGET_PREFIX}"

CFLAGS[unexport]   = "1"
CPPFLAGS[unexport] = "1"
LDFLAGS[unexport]  = "1"

CLASS_FLAGS += "${DEFCONFIG_FLAG}"
DEFCONFIG[expand] = "3"
CLASS_DEPENDS += "${DEPENDS_DEFCONFIG}"
DEPENDS_DEFCONFIG = "barebox-defconfig"

addhook barebox_depends_defconfig to post_recipe_parse after set_useflags
def barebox_depends_defconfig(d):
    flag = "USE_" + d.get("DEFCONFIG_FLAG")
    if not "DEFCONFIG" in d:
        d.set("DEFCONFIG", "${%s}"%(flag))
    d.set_override("DEPENDS_DEFCONFIG", ("", flag), "")

do_configure() {
	if [ "${DEFCONFIG}" = "file" ] ; then
		cp ${SRCDIR}/defconfig ${S}/.config
		yes '' | oe_runmake oldconfig
	elif [ -n "${DEFCONFIG}" ] ; then
		oe_runmake ${DEFCONFIG}
        elif [ -e "${HOST_SYSROOT}/barebox_defconfig" ] ; then
		cp ${HOST_SYSROOT}/barebox_defconfig ${S}/.config
		yes '' | oe_runmake oldconfig
	else
		die "No default configuration available"
	fi
}

do_compile () {
	oe_runmake all
}

# Support checking the image size
## @useflag barebox_maxsize Set to the maximum size allowed. See the sizecheck
##          class.
CLASS_FLAGS += "barebox_maxsize"
inherit sizecheck
BAREBOX_SIZECHECK = ""
BAREBOX_SIZECHECK:USE_barebox_maxsize = "${BAREBOX_IMAGE}:${USE_barebox_maxsize}"
SIZECHECK += "${BAREBOX_SIZECHECK}"

do_install () {
	install -d ${D}${bootdir}
	install -m 0644 ${BAREBOX_IMAGE} ${D}${bootdir}
	install -m 0755 ${BAREBOX_IMAGE_BASE} ${D}${bootdir}
}

INHIBIT_PACKAGE_STRIP = "1"

PACKAGES = "${PN} ${PN}-elf"
FILES_${PN} = "${bootdir}/${BAREBOX_IMAGE_FILENAME}"
FILES_${PN}-elf = "${bootdir}/${BAREBOX_IMAGE_BASE}"

PROVIDES_${PN} = "barebox"
PROVIDES_${PN}-elf = "barebox-elf"

addtask deploy before build after compile
do_deploy[dirs] = "${IMAGE_DEPLOY_DIR} ${S}"
REBUILD ?= "1"

do_deploy () {
	install -m 0644 ${BAREBOX_IMAGE} \
		${IMAGE_DEPLOY_DIR}/${BAREBOX_IMAGE_DEPLOY_FILE}
	cd ${IMAGE_DEPLOY_DIR}
	if [ -n "${BAREBOX_IMAGE_DEPLOY_LINK}" ] ; then
		rm -f  ${BAREBOX_IMAGE_DEPLOY_LINK}
		ln -sf ${BAREBOX_IMAGE_DEPLOY_FILE} \
			${BAREBOX_IMAGE_DEPLOY_LINK}
	fi
}

# Local Variables:
# mode: python
# End:
