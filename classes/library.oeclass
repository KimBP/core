## Class for (single) library recipes
##
## This class is highly usefull when having a recipe with a single library.
## An example of this would be jpeg. That would correctly package the library
## and provide the library 'libjpeg'. If having a recipe having multiple
## libraries, see the auto-package-libs class.
##
## @var LIBRARY_NAME Set the name of the library. If not setting LIBRARY NAME,
##      the name will be set to the package name if the package starts with
##      lib, or lib + package name otherwise.
## @var LIBRARY_VERSION Set the version of the library (libfoobar.so.2 has
##      library version 2).  When set, library version specific provides (like
##      libfoobar-2) are added to PROVIDES in addition to the version less
##      provide.

DEPENDS_${PN}		= "${PN}-dev_${PV}"
DEPENDS_${PN}-dev	= ""

FILES_${PN}		= "${base_sharedlibdir}/lib*${SOLIBS} ${sharedlibdir}/lib*${SOLIBS}"
ALLOW_EMPTY_${PN}-dev	= "0"

addhook library_depends to post_recipe_parse after fixup_package_type before blacklist

def library_depends(d):
    pkg = d.get("PN")
    pkg_type = d.get("PACKAGE_TYPE_" + pkg) or d.get("RECIPE_TYPE")
    pv = d.get("PV")
    devpkg = pkg + "-dev"
    pkg_depends = (d.get("DEPENDS_" + pkg) or "").split()

    qaflags = (d.get_flag("PROVIDES_" + pkg,"qa") or "").split()
    qaflags.append("is-library")
    d.set_flag("PROVIDES_" + pkg, "qa", " ".join(qaflags))

    library_name = d.get("LIBRARY_NAME")
    library_version = d.get("LIBRARY_VERSION")

    if pkg.startswith("lib"):
        if library_name and library_name != pkg:
            qaflags = (d.get_flag("PROVIDES_" + pkg, "qa") or "").split()
            qaflags.append("allow-missing-soname:" + pkg)
            d.set_flag("PROVIDES_" + pkg, "qa", " ".join(qaflags))
        else:
            library_name = pkg
    else:
        if not library_name:
            library_name = "lib" + pkg

    def append_provides(provide):
        if not provide in provides:
            provides.append(provide)

    provides = (d.get("PROVIDES_" + pkg) or "").split()
    if library_name != pkg:
        append_provides(library_name)
    if library_version:
        append_provides("%s-%s"%(library_name, library_version))
    d.set("PROVIDES_" + pkg, " ".join(provides))

    provides = (d.get("PROVIDES_" + devpkg) or "").split()
    if library_name != pkg:
        append_provides("%s-dev"%(library_name))
    if library_version:
        append_provides("%s-%s-dev"%(library_name, library_version))
    d.set("PROVIDES_" + devpkg, " ".join(provides))

    if not pkg_type in ("machine", "sdk", "canadian-cross"):
        return

    pkg_rdepends = d.get("RDEPENDS_" + pkg)
    if pkg_rdepends is None:
        pkg_rdepends = []
        for dep in pkg_depends:
            item = oelite.item.OEliteItem(dep, ("DEPENDS", pkg_type))
            if item.type != pkg_type:
                continue
            if dep == (devpkg + "_" + pv):
                continue
            if item.name.startswith("lib"):
                pkg_rdepends.append(dep)
        if pkg_rdepends:
            d.set("RDEPENDS_" + pkg, " ".join(pkg_rdepends))
    else:
        pkg_rdepends = pkg_rdepends.split()

    devpkg_rdepends = (d.get("RDEPENDS_" + devpkg) or "").split()
    for dep in pkg_rdepends:
        item = oelite.item.OEliteItem(dep, ("RDEPENDS", pkg_type))
        if item.name.startswith("lib") and not item.name.endswith("-dev"):
            if item.version:
                devdep = "%s:%s_%s"%(item.type, item.name + "-dev", item.type)
            else:
                devdep = "%s:%s"%(item.type, item.name + "-dev")
            devpkg_rdepends.append(dep + "-dev")
    d.set("RDEPENDS_" + devpkg, " ".join(devpkg_rdepends))

# Local Variables:
# mode: python
# End:
