## rpath helper functions
##

CHRPATH_BUILD	?= "${BUILD_PREFIX}chrpath"
CHRPATH_HOST	?= "${HOST_PREFIX}chrpath"
CHRPATH_TARGET	?= "${TARGET_PREFIX}chrpath"

CHRPATH_HOST:HOST_LIBC_mingw = ""
CHRPATH_TARGET:TARGET_LIBC_mingw = ""

CLASS_DEPENDS += "${CHRPATH_DEPENDS}"
CHRPATH_DEPENDS = "${CHRPATH_DEPENDS_HOST} ${CHRPATH_DEPENDS_TARGET}"
CHRPATH_DEPENDS_HOST = "host-cross:chrpath"
CHRPATH_DEPENDS_HOST:HOST_LIBC_mingw = ""
CHRPATH_DEPENDS_TARGET = "target-cross:chrpath"
CHRPATH_DEPENDS_TARGET:TARGET_LIBC_mingw = ""
CHRPATH_TYPES = "HOST TARGET"

def chrpath_get_cmd(d,filetype):

    import subprocess
    def cmd_exists(cmd):
        return subprocess.call("type " + cmd, shell=True,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

    chrpath_cmd = {}
    for elf_type in d.get("CHRPATH_TYPES").split():
        chrpath_cmd[elf_type] = (d.get("%s_ELF"%(elf_type)),
                                 d.get("CHRPATH_%s"%(elf_type)))
    try:
        if chrpath_cmd["TARGET"][0] == chrpath_cmd["HOST"][0]:
            del chrpath_cmd["TARGET"]
    except KeyError:
        pass
    for elf_type in chrpath_cmd.keys():
        if not chrpath_cmd[elf_type][0] or not chrpath_cmd[elf_type][1]:
            del chrpath_cmd[elf_type]
            continue
        chrpath_cmd[elf_type] = (re.compile(chrpath_cmd[elf_type][0]),
                                 chrpath_cmd[elf_type][1])
        if not cmd_exists(chrpath_cmd[elf_type][1]):
            raise Exception("CHRPATH_%s not found: %s"%(
                        elf_type, chrpath_cmd[elf_type][1]))

    if not "dynamically linked" in filetype:
        return None
    for elf_type in chrpath_cmd:
        if chrpath_cmd[elf_type][0].match(filetype):
            return chrpath_cmd[elf_type][1]
    return None

# Local Variables:
# mode: python
# End:
