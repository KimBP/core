# -*- mode:python; -*-

RECIPE_TYPES ?= "canadian-cross"

inherit archive-image
IMAGE_BASENAME ?= "oe-lite-sdk-${HOST_ARCH}-${TARGET_ARCH}"
ARCHIVE_IMAGE_DIRNAME ?= "sdk"
ARCHIVE_IMAGE_FORMATS:HOST_OS_mingw32 = "zip"

IMAGE_PREPROCESS_NETFILTER = ""
IMAGE_PREPROCESS_NETFILTER:HOST_OS_mingw32 = "image_preprocess_linux_netfilter_headers"
IMAGE_PREPROCESS_FUNCS += "${IMAGE_PREPROCESS_NETFILTER}"

SDK_IMAGE_ELF_SOWRAP_DIRS ?= "${base_bindir} ${bindir}"
SDK_IMAGE_ELF_SOWRAP_LD_SO ?= "/lib/ld-linux*.so.2"

RSTAGE_FIXUP_FUNCS += "${IMAGE_PREPROCESS_ELF_SOWRAP}"
IMAGE_PREPROCESS_ELF_SOWRAP = ""
IMAGE_PREPROCESS_ELF_SOWRAP:HOST_BINFMT_elf = " image_preprocess_elf_sowrap"
IMAGE_PREPROCESS_ELF_SOWRAP:USE_sdk_static = ""
def image_preprocess_elf_sowrap(d):
    import stat
    import magic

    filemagic = magic.open(magic.MAGIC_NONE)
    filemagic.load()
    host_elf_re = re.compile(d.get("HOST_ELF"))
    ld_so = d.get("SDK_IMAGE_ELF_SOWRAP_LD_SO")

    def is_elf(path):
        filetype = filemagic.file(path)
        return bool(host_elf_re.match(filetype))

    def is_static(path):
        filetype = filemagic.file(path)
        static_re = re.compile(".*statically.*")
        return bool(static_re.match(filetype))

    def sowrap_dir(dir, recursive=False):
        if not os.path.exists(dir):
            return True
        assert os.path.isdir(dir)
        ok = True
        for file in os.listdir(dir):
            path = os.path.join(dir, file)
            if os.path.islink(path):
                continue
            if os.path.isdir(path):
                if recursive:
                    sowrap_dir(path, recursive)
                continue
            dotpath = "%s/.%s"%(os.path.dirname(path), os.path.basename(path))
            if os.path.exists(dotpath):
                print "ERROR: file already exists:", os.path.join(dir, path)
                ok = False
                continue
            if is_elf(path) and is_static(path):
                continue
            os.rename(path, dotpath)
            with open(path, "w") as wrapper:
                dirparts = len(os.path.dirname(path).split('/'))
                relative_root = "/".join([".."] * dirparts)
                wrapper.write("#!/bin/sh\n")
                wrapper.write("$(dirname $0)/%s%s $(dirname $0)/%s $*\n"%(
                        relative_root, ld_so, os.path.basename(dotpath)))
            os.chmod(path, stat.S_IRWXU|stat.S_IRWXG|stat.S_IROTH|stat.S_IXOTH)
        return True

    bindirs = set(d.get("SDK_IMAGE_ELF_SOWRAP_DIRS").split())
    for dir in bindirs:
        recursive=False
        if dir.endswith("//"):
            recursive=True
        dir = dir.strip("/")
        rc = sowrap_dir(dir, recursive)
        if not rc:
            filemagic.close()
            return rc
    filemagic.close()
    return

image_preprocess_linux_netfilter_headers () {
	oenote image_preprocess_linux_netfilter_headers
	(
	cd ${TARGET_ARCH}/sysroot${target_includedir}/linux
	for f in netfilter*/*.h ; do
		fl=`echo $f | tr '[:upper:]' '[:lower:]'`
		if [ $fl != $f -a -f $fl ] ; then
			mv $f $f-case-conflict
		fi
	done
	)
}

IMAGE_PREPROCESS_FUNCS += "image_rm_sysroot_pkgmetadir"
image_rm_sysroot_pkgmetadir() {
    if [ "${IMAGE_PURGE_PKGMETADIR}" = "1" ] ; then
        rm -rf ${IMAGE_DIR}/${MACHINE_ARCH}/sysroot${pkgmetadir}
    fi
}

CLASS_RDEPENDS += "${RDEPENDS_SDK}"
RDEPENDS_SDK = " \
    gcc \
    target:libc \
    target:libdl \
    target:libpthread \
    target:librt \
    target:libgcc \
    target:libm \
    target:libutil \
    target:libcrypt \
    target:libresolv \
    ${RDEPENDS_SDK_LIBC_EXTRA} \
    target:gcc-sysroot-garbage \
    target:gcc-sysroot-locale \
    target:gcc-sysroot-doc \
"
RDEPENDS_SDK_LIBC_EXTRA = "target:libnss-files target:libnss-dns"
RDEPENDS_SDK_LIBC_EXTRA:TARGET_LIBC_uclibc = ""

CLASS_FLAGS += "sdk_cxx"
DEFAULT_USE_sdk_cxx = "1"
RDEPENDS_SDK += "${RDEPENDS_SDK_CXX}"
RDEPENDS_SDK_CXX = ""
RDEPENDS_SDK_CXX:USE_sdk_cxx = "gcc-g++ target:libstdc++-dev target:libstdc++"

CLASS_FLAGS += "sdk_gdb"
DEFAULT_USE_sdk_gdb = "1"
RDEPENDS_SDK += "${RDEPENDS_SDK_GDB}"
RDEPENDS_SDK_GDB = ""
RDEPENDS_SDK_GDB:USE_sdk_gdb = "gcc-gdb"

CLASS_FLAGS += "sdk_uboot_mkimage"
DEFAULT_USE_sdk_uboot_mkimage = "1"
RDEPENDS_SDK += "${RDEPENDS_SDK_UBOOT_MKIMAGE}"
RDEPENDS_SDK_UBOOT_MKIMAGE = ""
RDEPENDS_SDK_UBOOT_MKIMAGE:USE_sdk_uboot_mkimage = "${UBOOT_MKIMAGE}"
UBOOT_MKIMAGE = "host:u-boot-tools-mkimage"
UBOOT_MKIMAGE:HOST_OS_mingw32 = ""

CLASS_FLAGS += "sdk_archive_formats sdk_archive_tar_ext"
DEFAULT_USE_sdk_archive_formats = "tar"
DEFAULT_USE_sdk_archive_tar_ext = "tar.gz"
ARCHIVE_IMAGE_FORMATS = "${USE_sdk_archive_formats}"
ARCHIVE_IMAGE_DIRNAME = ""
ARCHIVE_IMAGE_TAR_EXT = "${USE_sdk_archive_tar_ext}"

PROVIDES_${PN} = "sdk"
