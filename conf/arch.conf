# Set host=machine and target=machine to get default architecture triplet =
# build/machine/build.
HOST_ARCH	 = "${MACHINE_ARCH}"
HOST_CPUTYPE	 = "${MACHINE_CPUTYPE}"
HOST_FPU	 = "${MACHINE_FPU}"
HOST_CFLAGS	 = "${MACHINE_CFLAGS}"
HOST_EXEEXT	 = "${MACHINE_EXEEXT}"
HOST_PREFIX	 = "${MACHINE_PREFIX}"
TARGET_ARCH	 = "${MACHINE_ARCH}"
TARGET_CPUTYPE	 = "${MACHINE_CPUTYPE}"
TARGET_FPU	 = "${MACHINE_FPU}"
TARGET_CFLAGS	 = "${MACHINE_CFLAGS}"
TARGET_EXEEXT	 = "${MACHINE_EXEEXT}"
TARGET_PREFIX	 = "${MACHINE_PREFIX}"

# Convenience variables for host and target arch tuple access.
# You should not be overriding these values!
HOST_CPU	 = "${@base_arch_cpu('${HOST_ARCH}')}"
HOST_VENDOR	 = "${@base_arch_vendor('${HOST_ARCH}')}"
HOST_OS		 = "${@base_arch_os('${HOST_ARCH}')}"
HOST_WORDSIZE	 = "${@base_arch_wordsize(d,'${HOST_ARCH}')}"
HOST_ENDIAN	 = "${@base_arch_endianness(d,'${HOST_ARCH}')}"
HOST_ELF	 = "${@base_arch_elf(d,'${HOST_ARCH}')}"
TARGET_CPU	 = "${@base_arch_cpu('${TARGET_ARCH}')}"
TARGET_VENDOR	 = "${@base_arch_vendor('${TARGET_ARCH}')}"
TARGET_OS	 = "${@base_arch_os('${TARGET_ARCH}')}"
TARGET_WORDSIZE	 = "${@base_arch_wordsize(d,'${TARGET_ARCH}')}"
TARGET_ENDIAN	 = "${@base_arch_endianness(d,'${TARGET_ARCH}')}"
TARGET_ELF	 = "${@base_arch_elf(d,'${TARGET_ARCH}')}"

# Recipe architecture, used for setting workdir and stampdir and stuff.
RECIPE_ARCH	 = "machine/${MACHINE_ARCH}"
RECIPE_ARCH_MACHINE = "machine/${MACHINE}"

### This is the point of no return for setting BUILD_CPU and BUILD_OS
### variables.

# This is the point of no return for setting BUILD_ARCH
# WARNING: Leave it unset unless you really know what you are doing
# and have a very good reason!

# If not set, we will use config.guess script to set them all, and
# otherwise use config.sub script to canonicalize them.  In both
# cases, dummy vendor names (unknown and pc) are dropped.
BUILD_ARCH	?= "${@base_arch_build(d)}"
BUILD_CPUTYPE	 = "${@base_arch_gcc_cputype(d,'${BUILD_ARCH}')}"
BUILD_FPU	 = "${@base_arch_fpu(d,'${BUILD_ARCH}')}"
# Build compiler options.
BUILD_CFLAGS	?= "${@base_arch_cflags(d,'${BUILD_ARCH}')}"
BUILD_EXEEXT	?= "${@base_arch_exeext(d,'${BUILD_ARCH}')}"
BUILD_PREFIX	?= ""
# These should not be set manually!
BUILD_CPU	?= "${@base_arch_cpu('${BUILD_ARCH}')}"
BUILD_VENDOR	?= "${@base_arch_vendor('${BUILD_ARCH}')}"
BUILD_OS	?= "${@base_arch_os('${BUILD_ARCH}')}"
BUILD_WORDSIZE	 = "${@base_arch_wordsize(d,'${BUILD_ARCH}')}"
BUILD_ENDIAN	 = "${@base_arch_endianness(d,'${BUILD_ARCH}')}"
BUILD_ELF	 = "${@base_arch_elf(d,'${BUILD_ARCH}')}"

# This is the point of no return for setting MACHINE customization
# variables (MACHINE_CPU and MACHINE_OS).
#
# Use config.sub script to canonicalize MACHINE architecture and set
# MACHINE_ARCH to a cross-compiler specific string, relative to the
# crosstool-ng component versions
MACHINE_ARCH	 = "${@base_arch_cross(d,'${MACHINE_CPU}-${MACHINE_OS}')}"
MACHINE_CPUTYPE	 = "${@base_arch_gcc_cputype(d,'${MACHINE_CPU}-${MACHINE_OS}')}"
MACHINE_FPU	 = "${@base_arch_fpu(d,'${MACHINE_CPU}-${MACHINE_OS}')}"
# Machine compiler options.
MACHINE_CFLAGS	?= "${@base_arch_cflags(d,'${MACHINE_CPU}-${MACHINE_OS}')}"
MACHINE_EXEEXT	?= "${@base_arch_exeext(d,'${MACHINE_CPU}-${MACHINE_OS}')}"
MACHINE_PREFIX	?= "${MACHINE_ARCH}-"
# These must be set manually or by machine/distro!
MACHINE_CPU	?= "UNKNOWN_CPU"
MACHINE_OS	?= "UNKNOWN_OS"

# This is the point of no return for setting SDK customization
# variables (SDK_CPU and SDK_OS).
#
# Use config.sub script to canonicalize MACHINE architecture.
# Dummy vendor names (unknown and pc) are dropped.
SDK_ARCH	?= "${@base_arch_cross(d,'${SDK_CPU}-${SDK_OS}')}"
SDK_CPUTYPE	 = "${@base_arch_gcc_cputype(d,'${SDK_CPU}-${SDK_OS}')}"
SDK_FPU		 = "${@base_arch_fpu(d,'${SDK_CPU}-${SDK_OS}')}"
# SDK compiler options.
SDK_CFLAGS	?= "${@base_arch_cflags(d,'${SDK_ARCH}')}"
SDK_EXEEXT	?= "${@base_arch_exeext(d,'${SDK_ARCH}')}"
SDK_PREFIX	?= "${SDK_ARCH}-"
# Default SDK architecture is BUILD architecture.
SDK_CPU		?= "${BUILD_CPU}-${BUILD_VENDOR}"
SDK_OS		?= "${BUILD_OS}"

# FIXME: does not really belong in this file
SDK_NAME	 = "${DISTRO}/${MACHINE_ARCH}"
SDK_PATH	 = "/usr/local/${SDK_NAME}"
