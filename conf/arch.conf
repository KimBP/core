# Path to config.guess and config.sub scripts
CONFIG_GUESS		?= "${@bb.archtuple.find_script(d, 'config.guess')}"
CONFIG_SUB		?= "${@bb.archtuple.find_script(d, 'config.sub')}"

# Set host=machine and target=machine to get default architecture triplet =
# build/machine/build
HOST_ARCH		 = "${MACHINE_ARCH}"
HOST_BCPU		 = "${MACHINE_BCPU}"
HOST_CPU		 = "${MACHINE_CPU}"
HOST_OS			 = "${MACHINE_OS}"
HOST_CROSS		 = "${MACHINE_CROSS}"
HOST_CROSS_CFLAGS	 = "${MACHINE_CROSS_CFLAGS}"
HOST_EXEEXT		 = "${MACHINE_EXEEXT}"
HOST_PREFIX		 = "${MACHINE_PREFIX}"
TARGET_ARCH		 = "${MACHINE_ARCH}"
TARGET_BCPU		 = "${MACHINE_BCPU}"
TARGET_CPU		 = "${MACHINE_CPU}"
TARGET_OS		 = "${MACHINE_OS}"
TARGET_CROSS		 = "${MACHINE_CROSS}"
TARGET_CROSS_CFLAGS	 = "${MACHINE_CROSS_CFLAGS}"
TARGET_EXEEXT		 = "${MACHINE_EXEEXT}"
TARGET_PREFIX		 = "${MACHINE_PREFIX}"

# PACKAGE_ARCH
# -- used for setting workdir and stampdir
RECIPE_ARCH		 = "machine/${MACHINE_ARCH}"
RECIPE_ARCH_MACHINE	 = "machine/${MACHINE}"

### This is the point of no return for setting BUILD_CPU and BUILD_OS
### variables.

# This is the point of no return for setting BUILD_ARCH
# WARNING: Leave it unset unless you really know what you are doing
# and have a very good reason!

# If not set, we will use config.guess script to set them all, and
# otherwise use config.sub script to canonicalize them.  In both
# cases, dummy vendor names (unknown and pc) are dropped.
BUILD_ARCH		?= "${@base_arch_config_guess(d)}"
# Build compiler options.
BUILD_CROSS		?= "${@base_arch_cross(d,'${BUILD_ARCH}')}"
BUILD_CROSS_CFLAGS	?= "${@base_arch_cross_cflags(d,'${BUILD_ARCH}')}"
BUILD_EXEEXT		?= "${@base_arch_exeext(d,'${BUILD_ARCH}')}"
BUILD_PREFIX		?= ""
# These should not be set manually!
BUILD_CPU		?= "${@base_arch_cpu('${BUILD_ARCH}')}"
BUILD_OS		?= "${@base_arch_os('${BUILD_ARCH}')}"
# Base CPU variable.
BUILD_BCPU		 = "${@base_arch_bcpu('${BUILD_ARCH}')}"

# This is the point of no return for setting MACHINE customization
# variables (MACHINE_CPU and MACHINE_OS).
#
# Use config.sub script to canonicalize MACHINE architecture.
# Dummy vendor names (unknown and pc) are dropped.
MACHINE_ARCH		 = "${@base_arch_config_sub(d,'${MACHINE_CPU}-${MACHINE_OS}')}"
# Machine compiler options.
MACHINE_CROSS		?= "${@base_arch_cross(d,'${MACHINE_ARCH}')}"
MACHINE_CROSS_CFLAGS	?= "${@base_arch_cross_cflags(d,'${MACHINE_ARCH}')}"
MACHINE_EXEEXT		?= "${@base_arch_exeext(d,'${MACHINE_ARCH}')}"
MACHINE_PREFIX		?= "${MACHINE_CROSS}-"
# These must be set manually or by machine/distro!
MACHINE_CPU		?= "UNKNOWN_CPU"
MACHINE_OS		?= "UNKNOWN_OS"
# Base CPU variable.
MACHINE_BCPU		= "${@base_arch_bcpu('${MACHINE_ARCH}')}"

# This is the point of no return for setting SDK customization
# variables (SDK_CPU and SDK_OS).
#
# Use config.sub script to canonicalize MACHINE architecture.
# Dummy vendor names (unknown and pc) are dropped.
SDK_ARCH		?= "${@base_arch_config_sub(d,'${SDK_CPU}-${SDK_OS}')}"
# SDK compiler options.
SDK_CROSS		 = "${@base_arch_cross(d,'${SDK_ARCH}')}"
SDK_CROSS_CFLAGS	?= "${@base_arch_cross_cflags(d,'${SDK_ARCH}')}"
SDK_EXEEXT		?= "${@base_arch_exeext(d,'${SDK_ARCH}')}"
SDK_PREFIX		?= "${SDK_CROSS}-"
# Default SDK architecture is BUILD architecture.
SDK_CPU			?= "${BUILD_CPU}"
SDK_OS			?= "${BUILD_OS}"
# Base CPU variable.
SDK_BCPU		 = "${@base_arch_bcpu('${SDK_ARCH}')}"

# FIXME: does not really belong in this file
SDK_NAME = "${DISTRO}/${MACHINE_ARCH}"
SDK_PATH = "/usr/local/${SDK_NAME}"
