##################################################################
# Recipe Parsing
##################################################################
#BBMASK = "/(nonworking|obsolete)/"


##################################################################
# Standard target filesystem layout.
##################################################################

# Path prefixes
layout_base_prefix	 = ""
layout_prefix		 = "${layout_base_prefix}/usr"
layout_exec_prefix	 = "${layout_prefix}"

# Base paths
layout_base_bindir	 = "${layout_base_prefix}/bin"
layout_base_sbindir	 = "${layout_base_prefix}/sbin"
layout_base_libdir	 = "${layout_base_prefix}/lib"

# Architecture independent paths
layout_sysconfdir	 = "${layout_base_prefix}/etc"
layout_localstatedir	 = "${layout_base_prefix}/var"
layout_servicedir	 = "${layout_base_prefix}/srv"
layout_sharedstatedir	 = "${layout_prefix}/com"
layout_datadir		 = "${layout_prefix}/share"
layout_infodir		 = "${layout_datadir}/info"
layout_mandir		 = "${layout_datadir}/man"
layout_docdir		 = "${layout_datadir}/doc"

# Architecture dependent paths
layout_bindir		 = "${layout_exec_prefix}/bin"
layout_sbindir		 = "${layout_exec_prefix}/sbin"
layout_libdir		 = "${layout_exec_prefix}/lib"
layout_libexecdir	 = "${layout_exec_prefix}/libexec"
layout_includedir	 = "${layout_exec_prefix}/include"


##################################################################
# Standard target filesystem paths.
##################################################################

# Path prefixes
export base_prefix	 = "${layout_base_prefix}"
export prefix		 = "${layout_prefix}"
export exec_prefix	 = "${layout_exec_prefix}"

# Base paths
export base_bindir	 = "${layout_base_bindir}"
export base_sbindir	 = "${layout_base_sbindir}"
export base_libdir	 = "${layout_base_libdir}"

# Architecture independent paths
export sysconfdir	 = "${layout_sysconfdir}"
export localstatedir	 = "${layout_localstatedir}"
export servicedir	 = "${layout_servicedir}"
export sharedstatedir	 = "${layout_sharedstatedir}"
export datadir		 = "${layout_datadir}"
export infodir		 = "${layout_infodir}"
export mandir		 = "${layout_mandir}"
export docdir		 = "${layout_docdir}"

# Architecture dependent paths
export bindir		 = "${layout_bindir}"
export sbindir		 = "${layout_sbindir}"
export libdir		 = "${layout_libdir}"
export libexecdir	 = "${layout_libexecdir}"
export includedir	 = "${layout_includedir}"


##################################################################
# Architecture setup
##################################################################

# Set host=target to get default architecture triplet = build/target/target
HOST_ARCH		 = "${TARGET_ARCH}"
HOST_CPU		 = "${TARGET_CPU}"
HOST_VENDOR		 = "${TARGET_VENDOR}"
HOST_OS			 = "${TARGET_OS}"
HOST_CC_ARCH		 = "${TARGET_CC_ARCH}"
HOST_EXEEXT		 = "${TARGET_EXEEXT}"
HOST_PREFIX		 = "${TARGET_PREFIX}"

# Set recipe and package architecture defaults
RECIPE_ARCH		 = "${TARGET_ARCH}"
RECIPE_ARCH_PREFIX	 = ""
RECIPE_ARCH_PATH	 = "${RECIPE_ARCH_PREFIX}${RECIPE_ARCH}"
PACKAGE_ARCH		 = "${RECIPE_ARCH}"
PACKAGE_ARCH_PREFIX	 = "${RECIPE_ARCH_PREFIX}"
PACKAGE_ARCH_PATH	 = "${PACKAGE_ARCH_PREFIX}${PACKAGE_ARCH}"

PACKAGE_EXTRA_ARCHS	?= ""
PACKAGE_ARCHS		 = "all any noarch ${TARGET_ARCH} ${PACKAGE_EXTRA_ARCHS} ${MACHINE}"


##################################################################
# GNU Config script paths
##################################################################

# Path to config.guess and config.sub scripts
CONFIG_GUESS	?= "${TOPDIR}/scripts/config.guess"
CONFIG_SUB	?= "${TOPDIR}/scripts/config.sub"


##################################################################
# Date/time variables.
##################################################################

DATE	:= "${@time.strftime('%Y%m%d',time.gmtime())}"
TIME	:= "${@time.strftime('%H%M%S',time.gmtime())}"
DATETIME = "${DATE}${TIME}"


##################################################################
# Package default variables.
##################################################################

PN = "${@bb.parse.BBHandler.vars_from_file(bb.data.getVar('FILE',d),d)[0] or 'defaultpkgname'}"
PV = "${@bb.parse.BBHandler.vars_from_file(bb.data.getVar('FILE',d),d)[1] or '1.0'}"
PR = "${@bb.parse.BBHandler.vars_from_file(bb.data.getVar('FILE',d),d)[2] or 'r0'}"
PF = "${PN}-${EXTENDPE}${PV}-${PR}"
EXTENDPE = "${@['','${PE\x7d_'][bb.data.getVar('PE',d,1) > 0]}"
EXTENDPEVER = "${@['','${PE\x7d:'][bb.data.getVar('PE',d,1) > 0]}"
EXTENDPV = "${EXTENDPEVER}${PV}-${PR}${DISTRO_PR}"
P = "${PN}-${PV}"

# Define a PR for kernels that machines can override so things like
# modules get rebuilt
MACHINE_KERNEL_PR = ""

# Base package name
# Automatically derives "foo" from "foo-native", "foo-cross" or "foo-initial"
# otherwise it is the same as PN and P
BPN = "${@base_package_name(d)}"
BP = "${BPN}-${PV}"

# Package info
SECTION		= "unknown"
PRIORITY	= "unknown"
DESCRIPTION	= "Version ${PV}-${PR} of package ${PN}"
LICENSE		= "unknown"
MAINTAINER	= "OE Lite community <oe-lite@lists.dotsrc.org>"
HOMEPAGE	= "unknown"

# Package dependencies and provides.

# Ensure that -dev packages recommend the corresponding -dev packages of their
# deps, and the same for -dbg.
DEPCHAIN_PRE 	= ""
DEPCHAIN_POST	= "-dev -dbg"

DEPENDS		= ""
RDEPENDS	= ""
PROVIDES	= ""
PROVIDES_prepend= "${P} ${PF} ${PN} "
RPROVIDES	= ""

#MULTI_PROVIDER_WHITELIST = "virtual/libintl"

SOLIBS = ".so.*"
# FIXME: move to conf/build or conf/sdk or something...
SOLIBS_darwin = ".*.dylib"
SOLIBS_darwin8 = ".*.dylib"
SOLIBS_darwin9 = ".*.dylib"

SOLIBSDEV = ".so"
# FIXME: move to conf/build or conf/sdk or something...
SOLIBSDEV_darwin = ".dylib"
SOLIBSDEV_darwin8 = ".dylib"
SOLIBSDEV_darwin9 = ".dylib"

PACKAGES = "${PN}-dbg ${PN} ${PN}-doc ${PN}-dev ${PN}-locale"
PACKAGES_DYNAMIC = "${PN}-locale-*"
FILES = ""

FILES_${PN} = "${bindir}/* ${sbindir}/* ${libexecdir}/* ${libdir}/lib*${SOLIBS} \
	${sysconfdir} ${sharedstatedir} ${localstatedir} \
	${base_bindir}/* ${base_sbindir}/* \
	${base_libdir}/*${SOLIBS} \
	${datadir}/${PN} ${libdir}/${PN}/* \
	"
#	${datadir}/pixmaps ${datadir}/applications
#	${datadir}/idl ${datadir}/omf ${datadir}/sounds
#	${libdir}/bonobo/servers

FILES_${PN}-doc = "${docdir} ${mandir} ${infodir} \
	"
#	${datadir}/gtk-doc ${datadir}/gnome/help
SECTION_${PN}-doc = "doc"

FILES_${PN}-dev = "${includedir} ${libdir}/lib*${SOLIBSDEV} \
	${libdir}/*.la ${libdir}/*.a ${libdir}/*.o ${libdir}/pkgconfig \
	${base_libdir}/*.a ${base_libdir}/*.o \
	${datadir}/aclocal ${datadir}/pkgconfig \
	"
SECTION_${PN}-dev = "devel"
ALLOW_EMPTY_${PN}-dev = "1"
RDEPENDS_${PN}-dev = "${PN} (= ${EXTENDPV})"

FILES_${PN}-dbg = "${bindir}/.debug ${sbindir}/.debug \
	${libexecdir}/.debug ${libdir}/.debug \
	${base_bindir}/.debug ${base_sbindir}/.debug \
	${base_libdir}/.debug ${libdir}/${PN}/.debug"
SECTION_${PN}-dbg = "devel"
ALLOW_EMPTY_${PN}-dbg = "1"
RRECOMMENDS_${PN}-dbg = "${PN} (= ${EXTENDPV})"

FILES_${PN}-locale = "${datadir}/locale"

# File manifest
export MANIFEST = "${FILESDIR}/manifest"

# file:// search paths
FILE_DIRNAME	= "${@os.path.dirname(bb.data.getVar('FILE', d))}"
FILESPATHBASE	= "${FILE_DIRNAME}"
FILESPATHPKG	= "${PF}:${P}:${PN}:${BP}:${BPN}:files:."
FILESPATH	= "${@':'.join([os.path.normpath(os.path.join(fp, p, o)) for fp in d.getVar('FILESPATHBASE', 1).split(':') for p in d.getVar('FILESPATHPKG', 1).split(':') for o in (d.getVar('OVERRIDES', 1) + ':').split(':') if os.path.exists(os.path.join(fp, p, o))])}"
FILESDIR	= "${@bb.which(d.getVar('FILESPATH', 1), '.')}"


##################################################################
# General work and output directories for the build system.
##################################################################

TMPDIR	 = "${TOPDIR}/tmp"
CACHE	:= "${TMPDIR}/cache${@['', '/' + str(bb.data.getVar('MACHINE', d, 1))][bool(bb.data.getVar('MACHINE', d, 1))]}${@['', '/' + str(bb.data.getVar('DISTRO', d, 1))][bool(bb.data.getVar('DISTRO', d, 1))]}"
SCM_DIR	 = "${TMPDIR}/scm"
CVSDIR	 = "${SCM_DIR}/cvs"
SVNDIR	 = "${SCM_DIR}/svn"
GITDIR	 = "${SCM_DIR}/git"
BZRDIR	 = "${SCM_DIR}/bzr"
HGDIR	 = "${SCM_DIR}/hg"

STAMP	 = "${TMPDIR}/stamps/${RECIPE_ARCH_PATH}/${PF}"
WORKDIR	 = "${TMPDIR}/work/${RECIPE_ARCH_PATH}/${PF}"
T	 = "${WORKDIR}/temp"
D	 = "${WORKDIR}/image"
S	 = "${WORKDIR}/${BP}"
B	 = "${S}"

STAGING_DIR		= "${TMPDIR}/staging"
#STAGING_DIR_HOST	= "${STAGING_DIR}/${HOST_ARCH}"
#STAGING_DIR_TARGET	= "${STAGING_DIR}/${TARGET_ARCH}"
#STAGING_DIR_SDK	= "${STAGING_DIR}/${SDK_ARCH}"

STAGING_BINDIR		= "${STAGING_DIR}/${HOST_ARCH}${layout_bindir}"
STAGING_SBINDIR		= "${STAGING_DIR}/${HOST_ARCH}${layout_sbindir}"
STAGING_LIBDIR		= "${STAGING_DIR}/${HOST_ARCH}${layout_libdir}"
STAGING_INCDIR		= "${STAGING_DIR}/${HOST_ARCH}${layout_includedir}"
STAGING_DATADIR		= "${STAGING_DIR}/${HOST_ARCH}${layout_datadir}"

# Setting DEPLOY_DIR outside of TMPDIR is helpful, when you are using
# packaged staging and/or multimachine.
DEPLOY_DIR		?= "${TOPDIR}/deploy"
DEPLOY_DIR_TAR		 = "${DEPLOY_DIR}/tar"
DEPLOY_DIR_IPK		 = "${DEPLOY_DIR}/ipk"
DEPLOY_DIR_RPM		 = "${DEPLOY_DIR}/rpm"
DEPLOY_DIR_DEB		 = "${DEPLOY_DIR}/deb"
DEPLOY_DIR_IMAGE	 = "${DEPLOY_DIR}/images"
DEPLOY_DIR_TOOLS	 = "${DEPLOY_DIR}/tools"

PKGDATA_DIR = "${TMPDIR}/pkgdata/${PACKAGE_ARCH_PATH}"

# move to sdk.bbclass or other place...
SDK_NAME = "${DISTRO}/${TARGET_ARCH}"
SDK_PATH = "/usr/local/${SDK_NAME}"


##################################################################
# Kernel info.
##################################################################

STAGING_KERNEL_DIR = "${STAGING_DIR}/${TARGET_ARCH}/kernel"


##################################################################
# Toolchain info.
##################################################################

PATH_prepend = "\
${STAGING_DIR}${layout_sbindir}:\
${STAGING_DIR}${layout_bindir}:\
${STAGING_DIR}${layout_base_sbindir}:\
${STAGING_DIR}${layout_base_bindir}:\
"
export PATH


##################################################################
# Build utility info.
##################################################################

CCACHE = "${@bb.which(bb.data.getVar('PATH', d, 1), 'ccache') and 'ccache '}"

export CC		= "${CCACHE}${HOST_PREFIX}gcc ${HOST_CC_ARCH}"
export CXX		= "${CCACHE}${HOST_PREFIX}g++ ${HOST_CC_ARCH}"
export F77		= "${CCACHE}${HOST_PREFIX}g77 ${HOST_CC_ARCH}"
export CPP		= "${HOST_PREFIX}cpp"
export LD		= "${HOST_PREFIX}ld"
export CCLD		= "${HOST_PREFIX}gcc"
export AR		= "${HOST_PREFIX}ar"
export AS		= "${HOST_PREFIX}as"
export RANLIB		= "${HOST_PREFIX}ranlib"
export STRIP		= "${HOST_PREFIX}strip"
export OBJCOPY		= "${HOST_PREFIX}objcopy"
export OBJDUMP		= "${HOST_PREFIX}objdump"
export NM		= "${HOST_PREFIX}nm"

export BUILD_CC		= "${CCACHE}${BUILD_PREFIX}gcc ${BUILD_CC_ARCH}"
export BUILD_CXX	= "${CCACHE}${BUILD_PREFIX}g++ ${BUILD_CC_ARCH}"
export BUILD_F77	= "${CCACHE}${BUILD_PREFIX}g77 ${BUILD_CC_ARCH}"
export BUILD_CPP	= "${BUILD_PREFIX}cpp"
export BUILD_LD		= "${BUILD_PREFIX}ld"
export BUILD_CCLD	= "${BUILD_PREFIX}gcc"
export BUILD_AR		= "${BUILD_PREFIX}ar"
export BUILD_AS		= "${BUILD_PREFIX}as"
export BUILD_RANLIB	= "${BUILD_PREFIX}ranlib"
export BUILD_STRIP	= "${BUILD_PREFIX}strip"
export BUILD_OBJCOPY	= "${BUILD_PREFIX}objcopy"
export BUILD_OBJDUMP	= "${BUILD_PREFIX}objdump"
export BUILD_NM		= "${BUILD_PREFIX}nm"

export MAKE = "make"
EXTRA_OEMAKE = "-e MAKEFLAGS="

# FIXME: can we remove this?
PYTHON	= "${@sys.executable}"


##################################################################
# Patch handling.
##################################################################
PATCHTOOL	= 'quilt'
PATCHRESOLVE	= 'noop'


##################################################################
# Build flags and options.
##################################################################

export BUILD_CPPFLAGS	= "-isystem${STAGING_DIR}${layout_includedir}"
export TARGET_CPPFLAGS	= "-isystem${STAGING_DIR}/${TARGET_ARCH}${layout_includedir}"
export SDK_CPPFLAGS	= "-isystem${STAGING_DIR}/${SDK_ARCH}${layout_includedir}"

export BUILD_CFLAGS	= "${BUILD_CPPFLAGS} ${BUILD_OPTIMIZATION}"
export TARGET_CFLAGS	= "${TARGET_CPPFLAGS} ${TARGET_OPTIMIZATION}"
export SDK_CFLAGS	= "${SDK_CPPFLAGS} ${SDK_OPTIMIZATION}"

export BUILD_CXXFLAGS	= "${BUILD_CFLAGS} -fpermissive"
export TARGET_CXXFLAGS	= "${TARGET_CFLAGS} -fpermissive"
export SDK_CXXFLAGS	= "${SDK_CFLAGS} -fpermissive"

export BUILD_LDFLAGS	= "-Wl,-O1 -Wl,--hash-style=${BUILD_LINK_HASH_STYLE} \
	-L${STAGING_DIR}${layout_libdir} \
	-Wl,-rpath,${STAGING_DIR}${layout_libdir}"
export SDK_LDFLAGS	= "-Wl,-O1 -Wl,--hash-style=${SDK_LINK_HASH_STYLE} \
	-L${STAGING_DIR}/${SDK_ARCH}${layout_libdir} \
	-Wl,-rpath-link,${STAGING_DIR}/${SDK_ARCH}${layout_libdir}"
export TARGET_LDFLAGS	= "-Wl,-O1 -Wl,--hash-style=${TARGET_LINK_HASH_STYLE} \
	-L${STAGING_DIR}/${TARGET_ARCH}${layout_libdir} \
	-Wl,-rpath-link,${STAGING_DIR}/${TARGET_ARCH}${layout_libdir}"

# Default to using target compiler/linker flags
export CPPFLAGS		= "${TARGET_CPPFLAGS}"
export CFLAGS		= "${TARGET_CFLAGS}"
export CXXFLAGS		= "${TARGET_CXXFLAGS}"
export LDFLAGS		= "${TARGET_LDFLAGS}"

BUILD_LINK_HASH_STYLE	?= "sysv"
TARGET_LINK_HASH_STYLE	?= "gnu"
SDK_LINK_HASH_STYLE	?= "sysv"

FULL_OPTIMIZATION = "-O2 \
	-fexpensive-optimizations \
	-fomit-frame-pointer \
	-frename-registers \
	"
DEBUG_OPTIMIZATION = "-O -g\
	-fno-omit-frame-pointer \
	"

BUILD_OPTIMIZATION = "-O2 -g"
SDK_OPTIMIZATION = "-O2"
TARGET_OPTIMIZATION = "${@bb.data.getVar(['FULL_OPTIMIZATION', 'DEBUG_OPTIMIZATION'][bb.data.getVar('DEBUG_BUILD', d, 1) == '1'], d, 1)}"

# Which flags to leave by strip-flags() in bin/build/oebuild.sh ?
ALLOWED_FLAGS = "-O -mcpu -march -pipe"

# Pass parallel make options to the compile task only
EXTRA_OEMAKE_prepend_task_do_compile = "${PARALLEL_MAKE} "
EXTRA_OEMAKE_prepend_task-compile = "${PARALLEL_MAKE} "


##################################################################
# Download locations and utilities.
##################################################################

OE_STRICT_CHECKSUMS ?= "1"

ADOBE_MIRROR = "http://fpdownload.macromedia.com/get/flashplayer/current/"
APACHE_MIRROR = "http://www.apache.org/dist"
DEBIAN_MIRROR = "ftp://ftp.debian.org/debian/pool"
E_CVS = "cvs://anonymous@anoncvs.enlightenment.org/var/cvs/e" 
E_URI = "http://enlightenment.freedesktop.org/files"
FREEBSD_MIRROR = "ftp://ftp.freebsd.org/pub/FreeBSD/"
FREEDESKTOP_CVS = "cvs://anoncvs:anoncvs@anoncvs.freedesktop.org/cvs"
FREESMARTPHONE_GIT = "git://git.freesmartphone.org"
GENTOO_MIRROR = "http://distfiles.gentoo.org/distfiles"
GNOME_GIT = "git://git.gnome.org"
GNOME_MIRROR = "http://ftp.gnome.org/pub/GNOME/sources"
GNU_MIRROR = "ftp://ftp.gnu.org/gnu"
GPE_MIRROR = "http://gpe.linuxtogo.org/download/source"
GPE_EXTRA_SVN = "svn://projects.linuxtogo.org/svn/gpe/trunk/extra;module=${PN}"
GPE_SVN = "svn://projects.linuxtogo.org/svn/gpe/trunk/base;module=${PN}"
GPEPHONE_MIRROR = "http://gpephone.linuxtogo.org/download/gpephone"
GPEPHONE_SVN = "svn://projects.linuxtogo.org/svn/gpephone/trunk/source;module=${PN}"
HANDHELDS_CVS = "cvs://anoncvs:anoncvs@anoncvs.handhelds.org/cvs"
KERNELORG_MIRROR = "http://kernel.org"
SOURCEFORGE_MIRROR = "http://downloads.sourceforge.net"
XLIBS_MIRROR = "http://xlibs.freedesktop.org/release"
XORG_MIRROR = "http://xorg.freedesktop.org/releases"

# You can use the mirror of your country to get faster downloads by putting
#  export DEBIAN_MIRROR = "ftp://ftp.de.debian.org/debian/pool"
#     into your local.conf

FETCHCMD_svn = "/usr/bin/env svn"
FETCHCMD_cvs = "/usr/bin/env cvs"
FETCHCMD_wget = "/usr/bin/env wget -t 5 --no-check-certificate"
FETCHCMD_bzr = "/usr/bin/env bzr"
FETCHCMD_hg = "/usr/bin/env hg"

FETCHCOMMAND = "ERROR, this must be a BitBake bug"
FETCHCOMMAND_wget = "/usr/bin/env 'PATH=${PATH}' wget -t 5 --passive-ftp --no-check-certificate -P ${DL_DIR} ${URI}"
FETCHCOMMAND_cvs = "/usr/bin/env 'PATH=${PATH}' cvs '-d${CVSROOT}' co ${CVSCOOPTS} ${CVSMODULE}"
FETCHCOMMAND_svn = "/usr/bin/env svn co ${SVNCOOPTS} ${SVNROOT} ${SVNMODULE}"
RESUMECOMMAND = "ERROR, this must be a BitBake bug"
RESUMECOMMAND_wget = "/usr/bin/env 'PATH=${PATH}' wget -c -t 5 --passive-ftp --no-check-certificate -P ${DL_DIR} ${URI}"
UPDATECOMMAND = "ERROR, this must be a BitBake bug"
UPDATECOMMAND_cvs = "/usr/bin/env 'PATH=${PATH}' cvs -d${CVSROOT} update -d -P ${CVSCOOPTS}"
UPDATECOMMAND_svn = "/usr/bin/env svn update ${SVNCOOPTS}"
SRCDATE = "${DATE}"
SRCREV = "1"
AUTOREV = "${@bb.fetch.get_srcrev(d)}"

SRC_URI = "file://${FILE}"


##################################################################
# UI/Interaction Configuration
##################################################################

SHELLRCCMD = "bash --rcfile $TERMRCFILE"
export SHELLCMDS = "${SHELLRCCMD}"
# Some common terminal programs to choose from
GNOME_TERMCMD = 'gnome-terminal --disable-factory -t "$TERMWINDOWTITLE"'
GNOME_TERMCMDRUN = '${GNOME_TERMCMD} -x $SHELLCMDS'
SCREEN_TERMCMD = 'screen -D -m -t "$TERMWINDOWTITLE"'
SCREEN_TERMCMDRUN = '${SCREEN_TERMCMD} $SHELLCMDS'
XTERM_TERMCMD = 'xterm -T "$TERMWINDOWTITLE"'
XTERM_TERMCMDRUN = '${XTERM_TERMCMD} -e $SHELLCMDS'
KONSOLE_TERMCMD = 'konsole -T "$TERMWINDOWTITLE"'
KONSOLE_TERMCMDRUN = '${KONSOLE_TERMCMD} -e $SHELLCMDS'

# Set a default
TERMCMD ?= "${GNOME_TERMCMD}"
TERMCMDRUN ?= "${GNOME_TERMCMDRUN}"


##################################################################
# Miscellaneous utilities.
##################################################################

MKTEMPDIRCMD = "mktemp -d -q ${TMPBASE}"
MKTEMPCMD = "mktemp -q ${TMPBASE}"

# GNU patch tries to be intellgent about checking out read-only files from
# a RCS, which freaks out those special folks with active Perforce clients
# the following makes patch ignore RCS:

export PATCH_GET="0"

# Program to be used to build ipkg packages

IPKGBUILDCMD = "ipkg-build -o 0 -g 0"

##################################################################
# Not sure about the rest of this yet.
##################################################################

# Other

# move to pkgconfig.bbclass using ?= or something...
export PKG_CONFIG_DIR = "${STAGING_DIR}/${BASE_PACKAGE_TARGET_SYS}${layout_libdir}/pkgconfig"
export PKG_CONFIG_PATH = "${PKG_CONFIG_DIR}:${STAGING_DIR}/${HOST_ARCH}${layout_datadir}/pkgconfig"
export PKG_CONFIG_SYSROOT_DIR = "${STAGING_DIR}/${BASE_PACKAGE_TARGET_SYS}"
export PKG_CONFIG_DISABLE_UNINSTALLED = "yes"

# FIXME: move to qmake_base.bbclass or something...
export QMAKE_MKSPEC_PATH = "${STAGING_DIR}${layout_datadir}/qmake"

# library package naming
AUTO_LIBNAME_PKGS = "${PACKAGES}"

# Pre-build configuration output

BUILDCFG_HEADER = "Build Configuration:"
BUILDCFG_VARS ?= "\
	BB_VERSION \
	METADATA_BRANCH METADATA_REVISION \
	TARGET_CPU TARGET_VENDOR TARGET_OS \
	SDK_CPU SDK_VENDOR SDK_SYS \
	MACHINE DISTRO DISTRO_VERSION \
	"
# FIXME: move to conf/target
BUILDCFG_VARS_append_arm = " TARGET_FPU"
# FIXME: move to conf/target
BUILDCFG_VARS_append_armeb = " TARGET_FPU"
BUILDCFG_NEEDEDVARS ?= "TARGET_ARCH TARGET_OS"

###
### Config file processing
###

# This means that an envionment variable named '<foo>_arm' overrides an
# environment variable '<foo>' (when ${TARGET_ARCH} is arm). And the same: an
# environment variable '<foo>_ramses' overrides both '<foo>' and '<foo>_arm
# when ${MACHINE} is 'ramses'. And finally '<foo>_local' overrides anything.
#
# This works for  functions as well, they are really just environment variables.
# Default OVERRIDES to make compilation fail fast in case of build system misconfiguration.
OVERRIDES = "\
local:\
${MACHINE}:\
${DISTRO}:\
${TARGET_CPU}:\
${TARGET_OS}:\
build-${BUILD_OS}:\
sdk-${SDK_OS}:\
pn-${PN}"


##################################################################
# Include the rest of the config files.
##################################################################

#require conf/collections.inc
include conf/site.conf
include conf/auto.conf
include conf/local.conf

# This is the point of no return for setting BUILD_CPU, BUILD_VENDOR
# and BUILD_OS variables.

# If not set, we will use config.guess script to set them all, and
# otherwise use config.sub script to canonicalize them.  In both
# cases, dummy vendor names (unknown and pc) are dropped.
BUILD_ARCH	 = "${@bb.archtuple.config_guess(d,'BUILD')}"

# Defaults for the remaining BUILD customization variables.
BUILD_CC_ARCH	?= ""
BUILD_EXEEXT	?= ""
BUILD_PREFIX	?= ""

include conf/build/${BUILD_ARCH}.conf
include conf/target/${TARGET_ARCH}.conf
include conf/sdk/${SDK_ARCH}.conf
include conf/machine/${MACHINE}.conf
include conf/distro/${DISTRO}.conf

# This is the point of no return for setting TARGET and SDK
# customization variables.

# Default SDK architecture is BUILD architecture.
SDK_CPU		?= "${BUILD_CPU}"
SDK_VENDOR	?= "${BUILD_VENDOR}"
SDK_OS		?= "${BUILD_OS}"

# Use config.sub script to canonicalize TARGET and SDK architecture.
# Dummy vendor names (unknown and pc) are dropped.
TARGET_ARCH	 = "${@bb.archtuple.config_sub(d,'TARGET')}"
SDK_ARCH	 = "${@bb.archtuple.config_sub(d,'SDK')}"

# Defaults for the remaining customization variables.
TARGET_CC_ARCH	?= ""
TARGET_EXEEXT	?= ""
TARGET_PREFIX	?= "${TARGET_SYS}-"
SDK_CC_ARCH	?= ""
SDK_EXEEXT	?= ""
SDK_PREFIX	?= "${SDK_SYS}-"


include conf/provided/${PROVIDED}.conf
include conf/documentation.conf
#require conf/sanity.conf
require conf/abi_version.conf


##################################################################
# Weak variables (usually to retain backwards compatibility)
##################################################################

DL_DIR ?= "${TMPDIR}/downloads"

# FIXME: should not also be set in conf/abi_version.conf
DISTRO_PR ?= ""

# Default to enabling packaged staging code
export PSTAGING_ACTIVE = "1"


##################################################################
# Magic Cookie for SANITY CHECK
##################################################################
OES_BITBAKE_CONF = "1"


##################################################################
# Machine properties and task-base stuff
##################################################################

#DISTRO_EXTRA_RDEPENDS			?= ""
#DISTRO_EXTRA_RRECOMMENDS		?= ""
#MACHINE_EXTRA_RDEPENDS			?= ""
#MACHINE_EXTRA_RRECOMMENDS		?= ""
#MACHINE_ESSENTIAL_EXTRA_RDEPENDS	?= ""
#MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS	?= ""
