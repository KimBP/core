##################################################################
# Build flags and options.
##################################################################

export BUILD_CPPFLAGS	= "-isystem${STAGING_DIR}${layout_includedir}"
export TARGET_CPPFLAGS	= "-isystem${STAGING_DIR}/${TARGET_ARCH}${layout_includedir}"
export SDK_CPPFLAGS	= "-isystem${STAGING_DIR}/${SDK_ARCH}${layout_includedir}"

export BUILD_CFLAGS	= "${BUILD_CPPFLAGS} ${BUILD_OPTIMIZATION}"
export TARGET_CFLAGS	= "${TARGET_CPPFLAGS} ${TARGET_OPTIMIZATION}"
export SDK_CFLAGS	= "${SDK_CPPFLAGS} ${SDK_OPTIMIZATION}"

export BUILD_CXXFLAGS	= "${BUILD_CFLAGS} -fpermissive"
export TARGET_CXXFLAGS	= "${TARGET_CFLAGS} -fpermissive"
export SDK_CXXFLAGS	= "${SDK_CFLAGS} -fpermissive"

export BUILD_LDFLAGS	= "-Wl,-O1 -Wl,--hash-style=${BUILD_LINK_HASH_STYLE} \
	-L${STAGING_DIR}${layout_libdir} \
	-Wl,-rpath,${STAGING_DIR}${layout_libdir}"
export SDK_LDFLAGS	= "-Wl,-O1 -Wl,--hash-style=${SDK_LINK_HASH_STYLE} \
	-L${STAGING_DIR}/${SDK_ARCH}${layout_libdir} \
	-Wl,-rpath-link,${STAGING_DIR}/${SDK_ARCH}${layout_libdir}"
export TARGET_LDFLAGS	= "-Wl,-O1 -Wl,--hash-style=${TARGET_LINK_HASH_STYLE} \
	-L${STAGING_DIR}/${TARGET_ARCH}${layout_libdir} \
	-Wl,-rpath-link,${STAGING_DIR}/${TARGET_ARCH}${layout_libdir}"

# Default to using target compiler/linker flags
export CPPFLAGS		= "${TARGET_CPPFLAGS}"
export CFLAGS		= "${TARGET_CFLAGS}"
export CXXFLAGS		= "${TARGET_CXXFLAGS}"
export LDFLAGS		= "${TARGET_LDFLAGS}"

BUILD_LINK_HASH_STYLE	?= "sysv"
TARGET_LINK_HASH_STYLE	?= "gnu"
SDK_LINK_HASH_STYLE	?= "sysv"

FULL_OPTIMIZATION = "-O2 \
	-fexpensive-optimizations \
	-fomit-frame-pointer \
	-frename-registers \
	"
DEBUG_OPTIMIZATION = "-O -g\
	-fno-omit-frame-pointer \
	"

BUILD_OPTIMIZATION = "-O2 -g"
SDK_OPTIMIZATION = "-O2"
TARGET_OPTIMIZATION = "${@bb.data.getVar(['FULL_OPTIMIZATION', 'DEBUG_OPTIMIZATION'][bb.data.getVar('DEBUG_BUILD', d, 1) == '1'], d, 1)}"

# Which flags to leave by strip-flags() in bin/build/oebuild.sh ?
ALLOWED_FLAGS = "-O -mcpu -march -pipe"

# Pass parallel make options to the compile task only
EXTRA_OEMAKE_prepend_task_do_compile = "${PARALLEL_MAKE} "
EXTRA_OEMAKE_prepend_task-compile = "${PARALLEL_MAKE} "

CCACHE = "${@bb.which(bb.data.getVar('PATH', d, 1), 'ccache') and 'ccache '}"

export CC		= "${CCACHE}${HOST_PREFIX}gcc ${HOST_CC_ARCH}"
export CXX		= "${CCACHE}${HOST_PREFIX}g++ ${HOST_CC_ARCH}"
export F77		= "${CCACHE}${HOST_PREFIX}g77 ${HOST_CC_ARCH}"
export CPP		= "${HOST_PREFIX}cpp"
export LD		= "${HOST_PREFIX}ld"
export CCLD		= "${HOST_PREFIX}gcc"
export AR		= "${HOST_PREFIX}ar"
export AS		= "${HOST_PREFIX}as"
export RANLIB		= "${HOST_PREFIX}ranlib"
export STRIP		= "${HOST_PREFIX}strip"
export OBJCOPY		= "${HOST_PREFIX}objcopy"
export OBJDUMP		= "${HOST_PREFIX}objdump"
export NM		= "${HOST_PREFIX}nm"

export BUILD_CC		= "${CCACHE}${BUILD_PREFIX}gcc ${BUILD_CC_ARCH}"
export BUILD_CXX	= "${CCACHE}${BUILD_PREFIX}g++ ${BUILD_CC_ARCH}"
export BUILD_F77	= "${CCACHE}${BUILD_PREFIX}g77 ${BUILD_CC_ARCH}"
export BUILD_CPP	= "${BUILD_PREFIX}cpp"
export BUILD_LD		= "${BUILD_PREFIX}ld"
export BUILD_CCLD	= "${BUILD_PREFIX}gcc"
export BUILD_AR		= "${BUILD_PREFIX}ar"
export BUILD_AS		= "${BUILD_PREFIX}as"
export BUILD_RANLIB	= "${BUILD_PREFIX}ranlib"
export BUILD_STRIP	= "${BUILD_PREFIX}strip"
export BUILD_OBJCOPY	= "${BUILD_PREFIX}objcopy"
export BUILD_OBJDUMP	= "${BUILD_PREFIX}objdump"
export BUILD_NM		= "${BUILD_PREFIX}nm"

export MAKE = "make"
EXTRA_OEMAKE = "-e MAKEFLAGS="

# FIXME: can we remove this?
PYTHON	= "${@sys.executable}"

export PATH
