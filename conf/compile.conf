#
# Compile flags and options
#

#FIXME: LDFLAGS and CFLAGS is not present in compile env (e.g. mtd-utils-native)
BUILD_CPPFLAGS		= "-isystem ${NATIVE_INCDIR}"
MACHINE_CPPFLAGS	= "--sysroot=${MACHINE_SYSROOT}"
SDK_CPPFLAGS		= "--sysroot=${SDK_SYSROOT}"
HOST_CPPFLAGS		= "${MACHINE_CPPFLAGS}"
TARGET_CPPFLAGS		= "${MACHINE_CPPFLAGS}"

BUILD_CFLAGS		= "${BUILD_CPPFLAGS} ${BUILD_OPTIMIZATION}"
MACHINE_CFLAGS		= "${MACHINE_CPPFLAGS} ${MACHINE_OPTIMIZATION}"
SDK_CFLAGS		= "${SDK_CPPFLAGS} ${SDK_OPTIMIZATION}"
HOST_CFLAGS		= "${MACHINE_CFLAGS}"
TARGET_CFLAGS		= "${MACHINE_CFLAGS}"

BUILD_CXXFLAGS		= "${BUILD_CFLAGS} -fpermissive"
MACHINE_CXXFLAGS	= "${MACHINE_CFLAGS} -fpermissive"
SDK_CXXFLAGS		= "${SDK_CFLAGS} -fpermissive"
HOST_CXXFLAGS		= "${MACHINE_CXXFLAGS}"
TARGET_CXXFLAGS		= "${MACHINE_CXXFLAGS}"

BUILD_LDFLAGS		= "-Wl,-O1 -Wl,-z -Wl,origin \
	-Wl,--hash-style=${BUILD_LINK_HASH_STYLE} \
	-Wl,-rpath,${NATIVE_BASE_LIBDIR} -L${NATIVE_BASE_LIBDIR} \
	-Wl,-rpath,${NATIVE_LIBDIR} -L${NATIVE_LIBDIR}"
MACHINE_LDFLAGS		= "-Wl,-O1 -Wl,--hash-style=${MACHINE_LINK_HASH_STYLE} \
	--sysroot=${MACHINE_SYSROOT}"
SDK_LDFLAGS		= "-Wl,-O1 -Wl,--hash-style=${SDK_LINK_HASH_STYLE} \
	--sysroot=${SDK_SYSROOT}"
HOST_LDFLAGS		= "${MACHINE_LDFLAGS}"
TARGET_LDFLAGS		= "${MACHINE_LDFLAGS}"

# Default compiler/linker flags are for host
CPPFLAGS		= "${HOST_CPPFLAGS}"
CFLAGS			= "${HOST_CFLAGS}"
CXXFLAGS		= "${HOST_CXXFLAGS}"
LDFLAGS			= "${HOST_LDFLAGS}"

# Export (host) compiler and linker flags to shell environment
export CPPFLAGS
export CFLAGS
export LDFLAGS

# Export build compiler and linker flags to shell environment
export BUILD_CPPFLAGS
export BUILD_CFLAGS
export BUILD_LDFLAGS

BUILD_LINK_HASH_STYLE	?= "gnu"
MACHINE_LINK_HASH_STYLE	?= "gnu"
SDK_LINK_HASH_STYLE	?= "both"

SPEED_OPTIMIZATION	= "-O2 \
	-fexpensive-optimizations \
	-fomit-frame-pointer \
	-frename-registers \
"
SIZE_OPTIMIZATION	= "-Os"
DEBUG_OPTIMIZATION	= "-O1 -g\
	-fno-omit-frame-pointer \
"

BUILD_OPTIMIZATION	= "-O3 -U_FORTIFY_SOURCE"
SDK_OPTIMIZATION	= "-O3"
MACHINE_OPTIMIZATION	= "${SPEED_OPTIMIZATION}"
HOST_OPTIMIZATION	= "${MACHINE_OPTIMIZATION}"
TARGET_OPTIMIZATION	= "${MACHINE_OPTIMIZATION}"

# Pass parallel make options to the compile task only
# FIXME: which of these are the right one with modern bitbake??
EXTRA_OEMAKE_prepend_task_do_compile = "${PARALLEL_MAKE} "
EXTRA_OEMAKE_prepend_task-compile = "${PARALLEL_MAKE} "

CCACHE = "${@bb.which(bb.data.getVar('PATH', d, 1), 'ccache') and 'ccache '}"

export CROSS	= "${HOST_PREFIX}"

# Host compiler, linker and so on
CC		= "${CCACHE}${HOST_PREFIX}gcc"
CXX		= "${CCACHE}${HOST_PREFIX}g++"
F77		= "${CCACHE}${HOST_PREFIX}g77"
CPP		= "${HOST_PREFIX}cpp"
LD		= "${HOST_PREFIX}ld"
CCLD		= "${HOST_PREFIX}gcc"
AR		= "${HOST_PREFIX}ar"
AS		= "${HOST_PREFIX}as"
RANLIB		= "${HOST_PREFIX}ranlib"
STRIP		= "${HOST_PREFIX}strip"
OBJCOPY		= "${HOST_PREFIX}objcopy"
OBJDUMP		= "${HOST_PREFIX}objdump"
NM		= "${HOST_PREFIX}nm"

BUILD_CC	= "${CCACHE}${BUILD_PREFIX}gcc ${BUILD_CFLAGS}"
BUILD_CXX	= "${CCACHE}${BUILD_PREFIX}g++ ${BUILD_CXXFLAGS}"
BUILD_F77	= "${CCACHE}${BUILD_PREFIX}g77 ${BUILD_CFLAGS}"
BUILD_CPP	= "${BUILD_PREFIX}cpp"
BUILD_LD	= "${BUILD_PREFIX}ld"
BUILD_CCLD	= "${BUILD_PREFIX}gcc"
BUILD_AR	= "${BUILD_PREFIX}ar"
BUILD_AS	= "${BUILD_PREFIX}as"
BUILD_RANLIB	= "${BUILD_PREFIX}ranlib"
BUILD_STRIP	= "${BUILD_PREFIX}strip"
BUILD_OBJCOPY	= "${BUILD_PREFIX}objcopy"
BUILD_OBJDUMP	= "${BUILD_PREFIX}objdump"
BUILD_NM	= "${BUILD_PREFIX}nm"

# Export (host) compiler, linker and so on (except for non-C language
# frontends, which is handled by their own bbclass file) to shell
# environment
export CC
export CPP
export LD
export CCLD
export AR
export AS
export RANLIB
export STRIP
export OBJCOPY
export OBJDUMP
export NM

# Also export build compiler, linker and so on
export BUILD_CC
export BUILD_CPP
export BUILD_LD
export BUILD_CCLD
export BUILD_AR
export BUILD_AS
export BUILD_RANLIB
export BUILD_STRIP
export BUILD_OBJCOPY
export BUILD_OBJDUMP
export BUILD_NM

export MAKE = "make"
EXTRA_OEMAKE = "-e MAKEFLAGS="

export PATH
