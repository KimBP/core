#
# Compile flags and options
#

#FIXME: LDFLAGS and CFLAGS is not present in compile env (e.g. mtd-utils-native)
BUILD_CPPFLAGS		= "-isystem ${NATIVE_INCDIR}"
MACHINE_CPPFLAGS	= "--sysroot=${MACHINE_SYSROOT}"
SDK_CPPFLAGS		= "--sysroot=${SDK_SYSROOT}"
HOST_CPPFLAGS		= "${MACHINE_CPPFLAGS}"
TARGET_CPPFLAGS		= "${MACHINE_CPPFLAGS}"
export BUILD_CPPFLAGS HOST_CPPFLAGS TARGET_CPPFLAGS

BUILD_CFLAGS		= "${BUILD_CPPFLAGS} ${BUILD_OPTIMIZATION}"
MACHINE_CFLAGS		= "${MACHINE_CPPFLAGS} ${MACHINE_OPTIMIZATION}"
SDK_CFLAGS		= "${SDK_CPPFLAGS} ${SDK_OPTIMIZATION}"
HOST_CFLAGS		= "${MACHINE_CFLAGS}"
TARGET_CFLAGS		= "${MACHINE_CFLAGS}"
export BUILD_CFLAGS HOST_CFLAGS TARGET_CFLAGS

BUILD_CXXFLAGS		= "${BUILD_CFLAGS} -fpermissive"
MACHINE_CXXFLAGS	= "${MACHINE_CFLAGS} -fpermissive"
SDK_CXXFLAGS		= "${SDK_CFLAGS} -fpermissive"
HOST_CXXFLAGS		= "${MACHINE_CXXFLAGS}"
TARGET_CXXFLAGS		= "${MACHINE_CXXFLAGS}"
export BUILD_CXXFLAGS HOST_CXXFLAGS TARGET_CXXFLAGS

BUILD_LDFLAGS		= "-Wl,-O1 -Wl,--hash-style=${BUILD_LINK_HASH_STYLE} \
 -L${NATIVE_LIBDIR} -Wl,-z -Wl,origin -Wl,-rpath,${NATIVE_LIBDIR}"
MACHINE_LDFLAGS		= "-Wl,-O1 -Wl,--hash-style=${MACHINE_LINK_HASH_STYLE}"
SDK_LDFLAGS		= "-Wl,-O1 -Wl,--hash-style=${SDK_LINK_HASH_STYLE}"
HOST_LDFLAGS		= "${MACHINE_LDFLAGS}"
TARGET_LDFLAGS		= "${MACHINE_LDFLAGS}"
export BUILD_LDFLAGS HOST_LDFLAGS TARGET_LDFLAGS

# Default compiler/linker flags are for host
CPPFLAGS		= "${HOST_CPPFLAGS}"
CFLAGS			= "${HOST_CFLAGS}"
CXXFLAGS		= "${HOST_CXXFLAGS}"
LDFLAGS			= "${HOST_LDFLAGS}"
export CPPFLAGS CFLAGS CXXFLAGS LDFLAGS

BUILD_LINK_HASH_STYLE	?= "gnu"
MACHINE_LINK_HASH_STYLE	?= "gnu"
SDK_LINK_HASH_STYLE	?= "both"

FULL_OPTIMIZATION	= "-O2\
 -fexpensive-optimizations\
 -fomit-frame-pointer\
 -frename-registers\
"
DEBUG_OPTIMIZATION	= "-O1 -g\
 -fno-omit-frame-pointer\
"

BUILD_OPTIMIZATION	= "-O2 -U_FORTIFY_SOURCE"
SDK_OPTIMIZATION	= "-O3"
TARGET_OPTIMIZATION = "${@bb.data.getVar(['FULL_OPTIMIZATION', 'DEBUG_OPTIMIZATION'][bb.data.getVar('DEBUG_BUILD', d, 1) == '1'], d, 1)}"

# Pass parallel make options to the compile task only
# FIXME: which of these are the right one with modern bitbake??
EXTRA_OEMAKE_prepend_task_do_compile = "${PARALLEL_MAKE} "
EXTRA_OEMAKE_prepend_task-compile = "${PARALLEL_MAKE} "

CCACHE = "${@bb.which(bb.data.getVar('PATH', d, 1), 'ccache') and 'ccache '}"

export CC		= "${CCACHE}${HOST_PREFIX}gcc ${HOST_CC_ARCH}"
export CXX		= "${CCACHE}${HOST_PREFIX}g++ ${HOST_CC_ARCH}"
export F77		= "${CCACHE}${HOST_PREFIX}g77 ${HOST_CC_ARCH}"
export CPP		= "${HOST_PREFIX}cpp"
export LD		= "${HOST_PREFIX}ld"
export CCLD		= "${HOST_PREFIX}gcc"
export AR		= "${HOST_PREFIX}ar"
export AS		= "${HOST_PREFIX}as"
export RANLIB		= "${HOST_PREFIX}ranlib"
export STRIP		= "${HOST_PREFIX}strip"
export OBJCOPY		= "${HOST_PREFIX}objcopy"
export OBJDUMP		= "${HOST_PREFIX}objdump"
export NM		= "${HOST_PREFIX}nm"

export BUILD_CC		= "${CCACHE}${BUILD_PREFIX}gcc ${BUILD_CC_ARCH}"
export BUILD_CXX	= "${CCACHE}${BUILD_PREFIX}g++ ${BUILD_CC_ARCH}"
export BUILD_F77	= "${CCACHE}${BUILD_PREFIX}g77 ${BUILD_CC_ARCH}"
export BUILD_CPP	= "${BUILD_PREFIX}cpp"
export BUILD_LD		= "${BUILD_PREFIX}ld"
export BUILD_CCLD	= "${BUILD_PREFIX}gcc"
export BUILD_AR		= "${BUILD_PREFIX}ar"
export BUILD_AS		= "${BUILD_PREFIX}as"
export BUILD_RANLIB	= "${BUILD_PREFIX}ranlib"
export BUILD_STRIP	= "${BUILD_PREFIX}strip"
export BUILD_OBJCOPY	= "${BUILD_PREFIX}objcopy"
export BUILD_OBJDUMP	= "${BUILD_PREFIX}objdump"
export BUILD_NM		= "${BUILD_PREFIX}nm"

export MAKE = "make"
EXTRA_OEMAKE = "-e MAKEFLAGS="

export PATH
