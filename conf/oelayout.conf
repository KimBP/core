#
# Internal OE-core directory layout
#

# OELAYOUT_ABI allows us to notify users when the format of TMPDIR changes in 
# an incompatible way. Such changes should usually be detailed in the commit
# that breaks the format and have been previously discussed on the mailing list 
# with general agreement from the core team.
OELAYOUT_ABI = "0"

DL_DIR		?= "${TOPDIR}/ingredients"
TMPDIR		 = "${TOPDIR}/tmp"
CACHE		:= "${TMPDIR}/cache${@['', '/' + str(bb.data.getVar('MACHINE', d, 1))][bool(bb.data.getVar('MACHINE', d, 1))]}${@['', '/' + str(bb.data.getVar('DISTRO', d, 1))][bool(bb.data.getVar('DISTRO', d, 1))]}"
SCM_DIR		 = "${TMPDIR}/scm"
CVSDIR		 = "${SCM_DIR}/cvs"
SVNDIR		 = "${SCM_DIR}/svn"
GITDIR		 = "${SCM_DIR}/git"
BZRDIR		 = "${SCM_DIR}/bzr"
HGDIR		 = "${SCM_DIR}/hg"

STAMP		 = "${TMPDIR}/stamps/${RECIPE_ARCH}/${PF}"
WORKDIR		 = "${TMPDIR}/work/${RECIPE_ARCH}/${PF}"
T		 = "${WORKDIR}/temp"
S		 = "${WORKDIR}/${BP}"
B		 = "${S}"
D		 = "${WORKDIR}/install"

PKGD		 = "${WORKDIR}/packages"
PKGD_STAGE	 = "${WORKDIR}/stage-packages"
PKGD_SYSROOT	 = "${WORKDIR}/sysroot-packages"

FILES_DIR		 = "${WORKDIR}/files"
STAGE_DIR		 = "${WORKDIR}/stage"
NATIVE_DIR		 = "${STAGE_DIR}/native"
CROSS_DIR		 = "${STAGE_DIR}/cross"
MACHINE_SYSROOT		 = "${STAGE_DIR}/machine"
SDK_SYSROOT		 = "${STAGE_DIR}/sdk"
KERNEL_STAGE		 = "${STAGE_DIR}/kernel"

NATIVE_BINDIR		 = "${NATIVE_DIR}${stage_bindir}"
NATIVE_SBINDIR		 = "${NATIVE_DIR}${stage_sbindir}"
NATIVE_LIBDIR		 = "${NATIVE_DIR}${stage_libdir}"
NATIVE_INCDIR		 = "${NATIVE_DIR}${stage_includedir}"

CROSS_BINDIR		 = "${CROSS_DIR}${stage_base_bindir}"

DEPLOY_DIR		?= "${TOPDIR}/deploy"
IMAGE_DEPLOY_DIR	 = "${DEPLOY_DIR}/images"
STAGE_PACKAGE_DIR 	 = "${DEPLOY_DIR}/stage"
PACKAGE_DIR	 	 = "${DEPLOY_DIR}/packages"

# Stage package path for default (machine) recipes
STAGE_PACKAGE_PATH	 = "\
${STAGE_PACKAGE_DIR}/machine/${MACHINE} \
${STAGE_PACKAGE_DIR}/machine/${MACHINE_ARCH} \
${STAGE_PACKAGE_DIR}/machine/${MACHINE_CROSS} \
${STAGE_PACKAGE_DIR}/cross/${TARGET_CROSS} \
${STAGE_PACKAGE_DIR}/native/${BUILD_ARCH} \
${STAGE_PACKAGE_DIR}/native/${BUILD_ARCH}--${MACHINE} \
"

PACKAGE_DIR_NATIVE_ARCH		= "${PACKAGE_DIR}/native/${BUILD_ARCH}"
PACKAGE_DIR_NATIVE_MACHINE	= "${PACKAGE_DIR}/native/${BUILD_ARCH}--${MACHINE}"
PACKAGE_DIR_ARCH		= "${PACKAGE_DIR}/machine/${MACHINE_ARCH}"
PACKAGE_DIR_MACHINE		= "${PACKAGE_DIR}/machine/${MACHINE}"
PACKAGE_DIR_SDK_ARCH		= "${PACKAGE_DIR}/sdk/${SDK_ARCH}"
PACKAGE_DIR_SDK_MACHINE		= "${PACKAGE_DIR}/sdk/${SDK_ARCH}--${MACHINE}"
PACKAGE_DIR_CANADIAN_ARCH	= "${PACKAGE_DIR}/canadian/${SDK_ARCH}--${MACHINE_ARCH}"
PACKAGE_DIR_CANADIAN_MACHINE	= "${PACKAGE_DIR}/canadian/${SDK_ARCH}--${MACHINE}"

# Package directory defaults for set_stage task
PACKAGE_DIR_CROSS		= "${PACKAGE_DIR}/cross/${HOST_ARCH_ABI}"
PACKAGE_DIR_SYSROOT_ARCH	= "${PACKAGE_DIR_ARCH}"
PACKAGE_DIR_SYSROOT_MACHINE	= "${PACKAGE_DIR_MACHINE}"

# Default package directories for target_package and stage_package tasks
TARGET_PACKAGE_OUTPUT_ARCH	= "${PACKAGE_DIR_ARCH}"
TARGET_PACKAGE_OUTPUT_MACHINE	= "${PACKAGE_DIR_MACHINE}"
TARGET_PACKAGE_OUTPUT		= "${TARGET_PACKAGE_OUTPUT_ARCH}"
# default (target) recipes are allowed to generate native packages, which could
# fx. contain scripts or data files needed by other recipes
STAGE_PACKAGE_OUTPUT_ARCH		= "${PACKAGE_DIR_NATIVE_ARCH}"
STAGE_PACKAGE_OUTPUT_MACHINE	= "${PACKAGE_DIR_NATIVE_MACHINE}"
STAGE_PACKAGE_OUTPUT		= "${STAGE_PACKAGE_OUTPUT_ARCH}"

PATH_prepend = "\
${CROSS_BINDIR}:\
${NATIVE_BINDIR}:${NATIVE_SBINDIR}:\
"

export PKG_CONFIG_DIR = "${SYSROOT_LIBDIR}/pkgconfig"
export PKG_CONFIG_PATH = "${PKG_CONFIG_DIR}"
export PKG_CONFIG_SYSROOT_DIR = "${STAGE_DIR_SYSROOT}"
export PKG_CONFIG_DISABLE_UNINSTALLED = "yes"

# Recipe directory layout
FILE_DIRNAME	= "${@os.path.dirname(bb.data.getVar('FILE', d))}"
FILESPATHBASE	= "${FILE_DIRNAME}"
FILESPATHPKG	= "${PF}:${P}:${PN}:${BP}:${BPN}:files:."
FILESPATH	= "${@':'.join([os.path.normpath(os.path.join(fp, p, o)) for fp in d.getVar('FILESPATHBASE', 1).split(':') for p in d.getVar('FILESPATHPKG', 1).split(':') for o in (d.getVar('OVERRIDES', 1) + ':').split(':') if os.path.exists(os.path.join(fp, p, o))])}"
FILESDIR	= "${@bb.which(d.getVar('FILESPATH', 1), '.')}"
