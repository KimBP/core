# HG changeset patch
# User Michael Hope <michael.hope@linaro.org>
# Date 1318991252 -46800
# Node ID b5179235b925ea501f5ed2796ff57616fa8d88cb
# Parent  f09ed6dd71a3f00ced50eedd966318d1cc9da207
scripts: introduce float type as a string

With the upcoming softfp support, the case..esac test would become
a bit convoluted if it were to test three different booleans.

Introduce a new blind string config option that defaults to the
selected floating point type used.

Signed-off-by: Michael Hope <michael.hope@linaro.org>
[yann.morin.1998@anciens.enib.fr: split the original patch]
Signed-off-by: "Yann E. MORIN" <yann.morin.1998@anciens.enib.fr>

diff -r f09ed6dd71a3 -r b5179235b925 config/target.in
--- a/config/target.in	Fri Nov 04 19:22:29 2011 +0100
+++ b/config/target.in	Wed Oct 19 15:27:32 2011 +1300
@@ -296,6 +296,11 @@
       
       Leave blank if you don't know better.
 
+config ARCH_FLOAT
+    string
+    default "hard"   if ARCH_FLOAT_HW
+    default "soft"   if ARCH_FLOAT_SW
+
 source "config.gen/arch.in.2"
 
 endmenu
diff -r f09ed6dd71a3 -r b5179235b925 scripts/build/libc/glibc-eglibc.sh-common
--- a/scripts/build/libc/glibc-eglibc.sh-common	Fri Nov 04 19:22:29 2011 +0100
+++ b/scripts/build/libc/glibc-eglibc.sh-common	Wed Oct 19 15:27:32 2011 +1300
@@ -132,9 +132,9 @@
         *) extra_config+=("--disable-shared");;
     esac
 
-    case "${CT_ARCH_FLOAT_HW},${CT_ARCH_FLOAT_SW}" in
-        y,) extra_config+=("--with-fp");;
-        ,y) extra_config+=("--without-fp");;
+    case "${CT_ARCH_FLOAT}" in
+        hard)   extra_config+=("--with-fp");;
+        soft)   extra_config+=("--without-fp");;
     esac
 
     if [ "${CT_LIBC_DISABLE_VERSIONING}" = "y" ]; then
diff -r f09ed6dd71a3 -r b5179235b925 scripts/functions
--- a/scripts/functions	Fri Nov 04 19:22:29 2011 +0100
+++ b/scripts/functions	Wed Oct 19 15:27:32 2011 +1300
@@ -983,7 +983,13 @@
     [ "${CT_ARCH_CPU}"      ] && { CT_ARCH_CPU_CFLAG="-mcpu=${CT_ARCH_CPU}";     CT_ARCH_WITH_CPU="--with-cpu=${CT_ARCH_CPU}";    }
     [ "${CT_ARCH_TUNE}"     ] && { CT_ARCH_TUNE_CFLAG="-mtune=${CT_ARCH_TUNE}";  CT_ARCH_WITH_TUNE="--with-tune=${CT_ARCH_TUNE}"; }
     [ "${CT_ARCH_FPU}"      ] && { CT_ARCH_FPU_CFLAG="-mfpu=${CT_ARCH_FPU}";     CT_ARCH_WITH_FPU="--with-fpu=${CT_ARCH_FPU}";    }
-    [ "${CT_ARCH_FLOAT_SW}" ] && { CT_ARCH_FLOAT_CFLAG="-msoft-float";           CT_ARCH_WITH_FLOAT="--with-float=soft";          }
+
+    case "${CT_ARCH_FLOAT}" in
+        soft)
+            CT_ARCH_FLOAT_CFLAG="-msoft-float"
+            CT_ARCH_WITH_FLOAT="--with-float=soft"
+            ;;
+    esac
 
     # Build the default kernel tuple part
     CT_TARGET_KERNEL="${CT_KERNEL}"
# HG changeset patch
# User Michael Hope <michael.hope@linaro.org>
# Date 1318991252 -46800
# Node ID 149c33923f476a7f6027f0db536b533c404ee7d2
# Parent  b5179235b925ea501f5ed2796ff57616fa8d88cb
scripts: use the hardfloat option to set configure and CFLAGS

When hardfloat is selected, we need to pass that selection down to
./configure and in the CFLAGS.

Signed-off-by: Michael Hope <michael.hope@linaro.org>
[yann.morin.1998@anciens.enib.fr: split the original patch]
Signed-off-by: "Yann E. MORIN" <yann.morin.1998@anciens.enib.fr>

diff -r b5179235b925 -r 149c33923f47 scripts/functions
--- a/scripts/functions	Wed Oct 19 15:27:32 2011 +1300
+++ b/scripts/functions	Wed Oct 19 15:27:32 2011 +1300
@@ -985,6 +985,10 @@
     [ "${CT_ARCH_FPU}"      ] && { CT_ARCH_FPU_CFLAG="-mfpu=${CT_ARCH_FPU}";     CT_ARCH_WITH_FPU="--with-fpu=${CT_ARCH_FPU}";    }
 
     case "${CT_ARCH_FLOAT}" in
+        hard)
+            CT_ARCH_FLOAT_CFLAG="-mhard-float"
+            CT_ARCH_WITH_FLOAT="--with-float=hard"
+            ;;
         soft)
             CT_ARCH_FLOAT_CFLAG="-msoft-float"
             CT_ARCH_WITH_FLOAT="--with-float=soft"
# HG changeset patch
# User Michael Hope <michael.hope@linaro.org>
# Date 1318991252 -46800
# Node ID f320e22f2cba84bf052e9a36ab00138b95637857
# Parent  149c33923f476a7f6027f0db536b533c404ee7d2
arch: add softfp support

Some architectures support a mixed hard/soft floating point, where
the compiler emits hardware floating point instructions, but passes
the operands in core (aka integer) registers.

For example, ARM supports this mode (to come in the next changeset).

Add support for softfp cross compilers to the GCC and GLIBC
configuration. Needed for Ubuntu and other distros that are softfp.

Signed-off-by: Michael Hope <michael.hope@linaro.org>
[yann.morin.1998@anciens.enib.fr: split the original patch]
Signed-off-by: "Yann E. MORIN" <yann.morin.1998@anciens.enib.fr>

diff -r 149c33923f47 -r f320e22f2cba config/target.in
--- a/config/target.in	Wed Oct 19 15:27:32 2011 +1300
+++ b/config/target.in	Wed Oct 19 15:27:32 2011 +1300
@@ -15,6 +15,7 @@
 config ARCH_SUPPORT_CPU
 config ARCH_SUPPORT_TUNE
 config ARCH_SUPPORT_FPU
+config ARCH_SUPPORT_SOFTFP
 
 config ARCH_DEFAULT_HAS_MMU
 config ARCH_DEFAULT_BE
@@ -144,6 +145,9 @@
 config ARCH_SUPPORT_FPU
     bool
 
+config ARCH_SUPPORT_SOFTFP
+    bool
+
 config ARCH_ARCH
     string
     prompt "Architecture level"
@@ -271,6 +275,22 @@
       If your processor has no FPU, then you most probably want this, as it
       is faster than emulating the FPU in the kernel.
 
+config ARCH_FLOAT_SOFTFP
+    bool
+    prompt "softfp"
+    depends on ARCH_SUPPORT_SOFTFP
+    help
+      Emit hardware floating point opcodes but use the software
+      floating point calling convention.
+
+      Architectures such as ARM use different registers for passing
+      floating point values depending on if they're in software mode
+      or hardware mode.  softfp emits FPU instructions but uses the
+      software FP calling convention allowing softfp code to
+      interoperate with legacy software only code.
+
+      If in doubt, use 'software' or 'hardware' mode instead.
+
 endchoice
 
 config TARGET_CFLAGS
@@ -300,6 +320,7 @@
     string
     default "hard"   if ARCH_FLOAT_HW
     default "soft"   if ARCH_FLOAT_SW
+    default "softfp" if ARCH_FLOAT_SOFTFP
 
 source "config.gen/arch.in.2"
 
diff -r 149c33923f47 -r f320e22f2cba scripts/build/libc/glibc-eglibc.sh-common
--- a/scripts/build/libc/glibc-eglibc.sh-common	Wed Oct 19 15:27:32 2011 +1300
+++ b/scripts/build/libc/glibc-eglibc.sh-common	Wed Oct 19 15:27:32 2011 +1300
@@ -135,6 +135,7 @@
     case "${CT_ARCH_FLOAT}" in
         hard)   extra_config+=("--with-fp");;
         soft)   extra_config+=("--without-fp");;
+        softfp) extra_config+=("--with-fp");;
     esac
 
     if [ "${CT_LIBC_DISABLE_VERSIONING}" = "y" ]; then
diff -r 149c33923f47 -r f320e22f2cba scripts/functions
--- a/scripts/functions	Wed Oct 19 15:27:32 2011 +1300
+++ b/scripts/functions	Wed Oct 19 15:27:32 2011 +1300
@@ -993,6 +993,10 @@
             CT_ARCH_FLOAT_CFLAG="-msoft-float"
             CT_ARCH_WITH_FLOAT="--with-float=soft"
             ;;
+        softfp)
+            CT_ARCH_FLOAT_CFLAG="-mfloat-abi=softfp"
+            CT_ARCH_WITH_FLOAT="--with-float=softfp"
+            ;;
     esac
 
     # Build the default kernel tuple part
# HG changeset patch
# User Michael Hope <michael.hope@linaro.org>
# Date 1318991252 -46800
# Node ID 8f5f36b3473bd7f15386dc73dce452b0f782cdd6
# Parent  f320e22f2cba84bf052e9a36ab00138b95637857
arch/arm: ARM supports the softfp convention

ARM compilers can be built for soft float (software only, floats in
core registers), hard float (uses floating point instructions, floats
in FPU registers), or the half-way house softfp (uses floating point
instructions, floats in core registers).

Signed-off-by: Michael Hope <michael.hope@linaro.org>
[yann.morin.1998@anciens.enib.fr: split the original patch]
Signed-off-by: "Yann E. MORIN" <yann.morin.1998@anciens.enib.fr>

diff -r f320e22f2cba -r 8f5f36b3473b config/arch/arm.in
--- a/config/arch/arm.in	Wed Oct 19 15:27:32 2011 +1300
+++ b/config/arch/arm.in	Wed Oct 19 15:27:32 2011 +1300
@@ -10,6 +10,7 @@
 ## select ARCH_SUPPORT_CPU
 ## select ARCH_SUPPORT_TUNE
 ## select ARCH_SUPPORT_FPU
+## select ARCH_SUPPORT_SOFTFP
 ##
 ## help The ARM architecture, as defined by:
 ## help     http://www.arm.com/
